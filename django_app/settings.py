"""
Django settings for django_app project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
import dj_database_url
from dotenv import load_dotenv, find_dotenv
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
from django.contrib.messages import constants as message_constants

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# for local development: see https://github.com/theskumar/python-dotenv
load_dotenv(find_dotenv('.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

# Application definition
INSTALLED_APPS = [
    'hut_theme',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # Disable Django's own staticfiles handling in favour of WhiteNoise, for
    # greater consistency between gunicorn and `./manage.py runserver`. See:
    # http://whitenoise.evans.io/en/stable/django.html#using-whitenoise-in-development
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.redirects',
    'django_extensions',
    'debug_toolbar',
    'gtm',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.redirects.middleware.RedirectFallbackMiddleware',
]

ROOT_URLCONF = 'django_app.urls'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = 'django_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Change 'default' database configuration with $DATABASE_URL.
DATABASE_URL = os.getenv('DATABASE_URL')

# This might need to be set to True in local environments
DISABLE_DATABASE_SSL_REQUIRE = os.getenv('DISABLE_DATABASE_SSL_REQUIRE', False)
if DATABASE_URL:
    DATABASES['default'].update(
        dj_database_url.config(
            conn_max_age=600,
            ssl_require=not DISABLE_DATABASE_SSL_REQUIRE,
        ),
    )

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Allow all host headers (necessary in Heroku)
ALLOWED_HOSTS = ['*']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
    os.path.join(PROJECT_ROOT, 'static'),
]

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Ensure STATIC_ROOT exists.
os.makedirs(STATIC_ROOT, exist_ok=True)

# Remove this when using a multi site layout
SITE_ID = os.getenv('SITE_ID', 1)
if SITE_ID:
    SITE_ID = int(SITE_ID)

# Secures the admin path by making it not 'admin'
ADMIN_PATH = os.getenv('ADMIN_PATH')

# Enables the django-debug-toolbar for local dev only
INTERNAL_IPS = ['127.0.0.1']

# Bootstrapify the message tags
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

# In case you need mail...
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_PORT = os.getenv('EMAIL_PORT')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Sentry
ENVIRONMENT = os.getenv('ENVIRONMENT')
SENTRY_ENVIRONMENT = os.getenv('SENTRY_ENVIRONMENT', ENVIRONMENT)
if os.getenv('SENTRY_DSN'):
    sentry_sdk.init(
        dsn=os.getenv('SENTRY_DSN'),
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
        ],
        environment=SENTRY_ENVIRONMENT,
        send_default_pii=True,
    )

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'pathname=%(pathname)s lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': sys.stdout
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
        },
    },
}

# Celery
REDIS_URL = os.getenv('REDIS_URL')
BROKER_URL = os.getenv('BROKER_URL', REDIS_URL)

# In local development if you do not have a local celery set up
# you should set this to True in your env to execute tasks synchronously
CELERY_TASK_ALWAYS_EAGER = os.getenv('CELERY_TASK_ALWAYS_EAGER', False)

# Caching
# By default use dummy (effectively disables)
CACHE_BACKEND = os.getenv('CACHE_BACKEND')
# Mandatory for most cache backends
CACHE_LOCATION = os.getenv('CACHE_LOCATION')

# Optional, but used in Heroku etc
CACHE_USERNAME = os.getenv('CACHE_USERNAME')
CACHE_PASSWORD = os.getenv('CACHE_PASSWORD')

if CACHE_BACKEND:
    CACHES = {
        'default': {
            'BACKEND': CACHE_BACKEND,
        },
    }

    if CACHE_LOCATION:
        CACHES['default'].update({
            'LOCATION': CACHE_LOCATION,
        })

    if CACHE_USERNAME:
        # noinspection PyTypeChecker
        CACHES['default'].update({
            'OPTIONS': {
                'username': CACHE_USERNAME,
                'password': CACHE_PASSWORD,
            }
        })

# Convenience settings
CACHE_TIMEOUT_FOREVER = None
CACHE_TIMEOUT_LONG = 60 * 60 * 24
CACHE_TIMEOUT_SHORT = 5

# Admin titles
ADMIN_SITE_HEADER = os.getenv('ADMIN_SITE_HEADER', 'Application administration')
ADMIN_SITE_TITLE = os.getenv('ADMIN_SITE_TITLE', 'Application site admin')
ADMIN_INDEX_TITLE = os.getenv('ADMIN_INDEX_TITLE', 'Application administration')

# Tag manager foo bar
GOOGLE_TAG_ID = os.getenv('GOOGLE_TAG_ID')

# Settings to be used in templates
SETTINGS_EXPORT = [
    'DEBUG',
]
